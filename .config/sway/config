# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.
### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
set $alt Mod1
set $altgr Mod5
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your sway variables
set $term "kitty"
set $display1 eDP-1
set $display1_position 0,0
set $display2 HDMI-A-1
set $display2_position 1366,0

input "type:keyboard" {
    xkb_layout br
    # xkb_options caps:swapescape
    xkb_options caps:escape
}

input "type:touchpad" {
    natural_scroll enabled
    tap enabled
}

# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
set $menu exec fuzzel
# set $menu wofi --show drun

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
output * bg /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
exec swayidle -w \
    before-sleep 'playerctl pause; swaylock -f -c 000000' \
    after-resume "sh -c 'swaymsg output $display1 enable; swaymsg output $display1 power on'" \
    lid:toggle 'test `cat /proc/acpi/button/lid/LID0/state | cut -d ":" -f 2 | tr -d " "` = "closed" && systemctl suspend' \
    lid:on "sh -c 'swaymsg output $display1 power on'"
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

# input "type:keyboard" xkb_options caps:swapescape
### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec --no-startup-id swaymsg [app_id="^kitty$"] focus || exec $term; exec "sleep 0.5 && swaymsg [app_id="^kitty$"] mark mark1"
    bindsym $alt+Return exec --no-startup-id swaymsg [app_id="^kitty$"] focus || exec $term; exec "sleep 0.5 && swaymsg [app_id="^kitty$"] mark mark1"
    bindsym $alt+h exec --no-startup-id swaymsg [app_id="^kitty$"] focus || exec $term; exec "sleep 0.5 && swaymsg [app_id="^kitty$"] mark mark1"

    # Kill focused window
    bindsym $mod+Shift+q kill
    bindsym $mod+q kill
    bindsym $alt+F4 kill

    # Start your launcher
    bindsym $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym --locked $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $altgr+Escape move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $alt+Escape scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    swaybar_command waybar
}

include /etc/sway/config.d/*

# ------------------------------------------
# CUSTOM CONFIGS
# ------------------------------------------

# Disable sway from automatically moving when focusing on another output
mouse_warping none

# fix vimium's command visitPreviousTab
focus_on_window_activation smart

# Title bar padding size
titlebar_padding 10 2

# Set stacking layout for all workspaces
workspace_layout tabbed

# Force windows to start with stacking layout
# for_window [class=".*"] layout tabbed
# for_window [app_id=".*"] layout tabbed

# Define exceptions for stacking layout
# swaymsg -t get_tree | fzf | wl-copy
for_window [app_id="com.github.hluk.copyq"] floating enable
for_window [app_id="it.mijorus.smile"] floating enable
for_window [app_id="org.gnome.Calculator"] floating enable

# Disable XF86PowerOff key and assign it to suspend machine
exec systemd-inhibit --what=handle-power-key sleep infinity
bindsym --locked XF86PowerOff exec "sh -c 'swaylock -f -e -l -c 00ffff & systemctl suspend'"
bindsym --locked $altgr+F1 exec "sh -c 'swaylock -f -e -l -c 00ffff & systemctl suspend'"
bindsym --locked $mod+XF86PowerOff exec poweroff
bindsym --locked $alt+XF86PowerOff exec reboot

# Workspace management
workspace 1 output eDP-1
workspace 2 output HDMI-A-1
workspace 3 output eDP-1
workspace 4 output eDP-1

bindsym $mod+Control+Shift+Right move workspace to output right
bindsym $mod+Control+Shift+Left move workspace to output left
bindsym $mod+Control+Shift+Down move workspace to output down
bindsym $mod+Control+Shift+Up move workspace to output up

# Switch display configuration
bindsym --locked $altgr+5 exec swaymsg "output eDP-1 power on"
bindsym --locked $altgr+0 exec "wlr-randr --output $display1 --off --output $display2 --off"
bindsym --locked $altgr+1 exec "wlr-randr --output $display1 --on --output $display2 --off"
bindsym --locked $altgr+2 exec "wlr-randr --output $display1 --pos $display1_position --on --output $display2 --pos $display2_position --on"
bindsym --locked $altgr+3 exec "wlr-randr --output $display1 --off --output $display2 --on"
bindsym $mod+p exec ~/dotfiles/bin/change_display_configuration.sh

# Execute command at startup
exec swaymsg "workspace 1; exec $term; exec 'sleep 1 && swaymsg [app_id="^kitty$"] mark mark1'"
exec "dunst"
exec "copyq"
exec "blueman-applet"
exec "playerctld daemon"
exec "nm-applet --indicator"

# Execute command every time Sway configuration is reloaded
exec_always "wlr-randr --output $display1 --pos $display1_position --on --output $display2 --pos $display2_position --on"

# Assign default workspace for applications
# Use command below to get class or app id
# swaymsg -t get_tree | fzf | wl-copy
assign [app_id="kitty"] workspace number 1
assign [class="Brave-browser"] workspace number 2
assign [app_id="evince"] workspace number 2
assign [class="steam"] workspace number 3
assign [app_id="rhythmbox"] workspace number 3
assign [class="Docker Desktop"] workspace number 3
assign [app_id="org.qbittorrent.qBittorrent"] workspace number 3
assign [app_id=".*telegram.*"] workspace number 4

# Create marks and focus on marked windows
# bindsym $alt+$altgr+h mark --add mark1
# bindsym $alt+$altgr+j mark --add mark2
# bindsym $alt+$altgr+k mark --add mark3
# bindsym $alt+$altgr+l mark --add mark4
#
# bindsym $alt+h [con_mark="mark1"] focus
# bindsym $alt+j [con_mark="mark2"] focus
# bindsym $alt+k [con_mark="mark3"] focus
# bindsym $alt+l [con_mark="mark4"] focus
#
# bindsym $alt+c unmark

# Cancel vertical/horizontal split
bindsym $mod+n split none

# Attach to last workspace
bindsym $mod+Tab workspace back_and_forth

# Add Num_Lock warning to waybar
mode "Num_Lock" {
    bindsym Num_Lock mode "default"
    bindsym Caps_Lock mode "Caps_Num_Lock"
}
bindsym Num_Lock mode "Num_Lock"

# Add Caps_Lock warning to waybar
mode "Caps_Lock" {
    bindsym Caps_Lock mode "default"
    bindsym Num_Lock mode "Caps_Num_Lock"
}
bindsym Caps_Lock mode "Caps_Lock"

mode "Caps_Num_Lock" {
    bindsym Num_Lock mode "Caps_Lock"
    bindsym Caps_Lock mode "Num_Lock"
}

# Volume control
bindsym --locked XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym --locked XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%
bindsym --locked XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%
bindsym --locked F9 exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym --locked F11 exec pactl set-sink-volume @DEFAULT_SINK@ +5%
bindsym --locked F10 exec pactl set-sink-volume @DEFAULT_SINK@ -5%
bindsym --locked $mod+m exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym --locked $mod+x exec pactl set-sink-volume @DEFAULT_SINK@ +5%
bindsym --locked $mod+z exec pactl set-sink-volume @DEFAULT_SINK@ -5%
bindsym $altgr+x exec pactl set-source-volume @DEFAULT_SOURCE@ +5%
bindsym $altgr+z exec pactl set-source-volume @DEFAULT_SOURCE@ -5%

# Control audio playback with alt gr key shortcuts
bindsym $altgr+j exec playerctl previous
bindsym $altgr+k exec playerctl play-pause
bindsym $altgr+l exec playerctl next

# Control brightness with Fn+F3 and Fn+F4
bindsym XF86MonBrightnessUp exec light -A 5
bindsym XF86MonBrightnessDown exec light -U 5

# Screenshot shortcuts
bindsym Print exec grimshot --notify copy area
bindsym $mod+Print exec grimshot --notify savecopy area ~/Pictures/screenshot_$(date +%F_%H-%M-%S).png
bindsym $alt+Print exec bash -c 'grimshot savecopy area ~/Pictures/screenshot_$(date +%F_%H-%M-%S).png && xdg-open $(ls -t ~/Pictures/screenshot_*.png | head -n1)'
bindsym $altgr+Print exec grimshot --notify savecopy active ~/Pictures/screenshot_$(date +%F_%H-%M-%S).png

# Script shortcuts
bindsym $mod+c exec ~/dotfiles/bin/finder.sh
bindsym $altgr+v exec ~/dotfiles/scripts/fuzzy_paste.sh
bindsym $altgr+s exec ~/dotfiles/bin/focus_window.sh
bindsym $alt+v exec copyq menu
bindsym $alt+period exec flatpak run it.mijorus.smile
# bindsym $altgr+d exec wofi --show drun --allow-images -i --matching=fuzzy

# Application shortcuts
# swaymsg -t get_tree | fzf | wl-copy
bindsym $alt+j exec --no-startup-id swaymsg [class="Brave-browser"] focus || exec flatpak run com.brave.Browser; exec "sleep 3 && swaymsg [class="Brave-browser"] mark mark2"
bindsym $alt+k exec --no-startup-id swaymsg [app_id="evince"] focus || exec evince; exec "sleep 1 && swaymsg [app_id="evince"] mark mark3"
bindsym $alt+l exec --no-startup-id swaymsg [app_id="org.telegram.desktop"] focus || exec flatpak run org.telegram.desktop
bindsym $alt+n exec --no-startup-id swaymsg [app_id="org.gnome.Nautilus"] focus || exec nautilus
bindsym $alt+r exec --no-startup-id swaymsg [app_id="rhythmbox"] focus || exec rhythmbox

# wtype keyboard bindings
bindsym Menu exec zsh -c 'wtype /'
bindsym $altgr+g exec "wtype 'github.com/troclaux'"
